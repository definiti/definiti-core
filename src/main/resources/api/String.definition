/**
 * A `String` represents a sequence of characters.
 * It can be manipulated by provided methods.
 * All changes creates a new `String`.
 */
type String {

  /**
   * Returns the number of characters of the `String`.
   */
  length: Number

  /**
   * Checks if this `String` has no character.
   */
  isEmpty(): Boolean

  /**
   * Checks if there is at least one character in this `String`.
   */
  nonEmpty(): Boolean

  /**
   * Checks if this `String` contains the given sub-`String`.
   */
  contains(other: String): Boolean

  /**
   * Checks if the `String` starts with the given `prefix`.
   */
  startsWith(prefix: String): Boolean

  /**
   * Checks if the `String` ends with the given `suffix`.
   */
  endsWith(suffix: String): Boolean

  /**
   * Checks if the `String` matches the given `regex`.
   *
   * ⚠ A more complete documentation should be done to be conform to all languages. ⚠
   */
  matches(regex: String): Boolean

  /**
   * Returns the index of the given `substring` wrapped into an `Option`.
   * If the element does not exist, returns an empty `Option`.
   */
  indexOf(substring: String): Option[Number]

  /**
   * Returns the last index of the given `substring` wrapped into an `Option`.
   * If the element does not exist, returns an empty `Option`.
   */
  lastIndexOf(substring: String): Option[Number]

  /**
   * Appends the given `String` after this one.
   */
  append(other: String): String

  /**
   * Prepends the given `String` before this one.
   */
  prepend(other: String): String

  /**
   * Returns a new `String` without the first `numberOfCharactersToDrop` elements.
   * If `numberOfCharactersToDrop` if greater than the size of the `String`, returns an empty `String`.
   */
  dropLeft(numberOfCharactersToDrop: Number): String

  /**
   * Returns a new `String` without the last `numberOfCharactersToDrop` elements.
   * If `numberOfCharactersToDrop` if greater than the size of the `String`, returns an empty `String`.
   */
  dropRight(numberOfCharactersToDrop: Number): String

  /**
   * Removes all blank characters (spaces, tab, breaking lines) at the beginning and the end of the `String`.
   */
  trim(): String

  /**
   * Repeats the string `n` times.
   * If `n` is not an integer, rounds the `Number` to the previous integer.
   */
  repeat(n: Number): String

  /**
   * Transforms into a `String` starting with the last character through the first one.
   */
  reverse(): String

  /**
   * Extracts the substring from this string, starting from `start` included and having a length of `length`.
   * If `start` if negative, it will be considered as `this.length - start`.
   * If `start + length` is greater than the length of this `String`, ends the sub-`String` at the end of this `String`.
   */
  substring(start: Number, length: Number): String

  /**
   * Transforms this string to the same with only upper case characters.
   */
  toUpperCase(): String

  /**
   * Transforms this string to the same with only lower case characters.
   */
  toLowerCase(): String

  /**
   * Replaces all occurrences of the given `search` by the given `replacement`.
   * It does not use regex.
   */
  replace(search: String, replacement: String): String

  /**
   * Replaces the first occurrences of the given `search` by the given `replacement`.
   * It does not use regex.
   */
  replaceFirst(search: String, replacement: String): String

  /**
   * Replaces the first occurrences of the given `search` by the given `replacement`.
   * The search will be considered as a Regex.
   */
  replaceMatch(search: String, replacement: String): String

  /**
   * Replaces the first occurrences of the given `search` by the given `replacement`.
   * The search will be considered as a Regex.
   */
  replaceFirstMatch(search: String, replacement: String): String
}
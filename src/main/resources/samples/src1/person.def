package my.person

import my.types.NonEmptyString
import my.types.NonBlank
import my.types.PhoneNumber

type Person {
  firstName: NonEmptyString
  lastName: NonEmptyString
  telephone: PhoneNumber
}

context myContext {{{
  /**
   * Checks the user is logged in.
   */
  requirement IsLoggedIn(): Unit

  requirement IsAdmin(): Unit

  requirement IsOwnerOfArticle(id: Number): Unit

  requirement ArticleNotLocked(id: Number): ErrorMessage

  /**
   * Returns the whole list of articles.
   * If the list contains more than 200 elements, truncates the list with 200 last registered articles.
   */
  request ListOfArticle {
    GET "articles"
    returning {
      200 with List[ArticleMeta]
    }
  }

  /**
   * Reads the article.
   * @param id The id of the article
   */
  request ReadArticle {
    GET  "articles" / (id: Number)
    returning {
      Ok with ReadArticle
      NotFound with "The article was not found"
    }
  }

  request SearchArticles {
    GET  "search" ? (query: String, order: String, limit: Number)
    returning {
      200 with List[ArticleMeta]
      400 with SearchErrors
    }
  }

  request CreateArticle {
    POST "articles" with ArticleCreation
    requiring {
      IsLoggedIn() abort 401 with "Please login before creating articles"
      IsAdmin() abort 403 with "You do not have enough rights to create articles"
    }
    returning {
      Ok
      BadRequest with ArticleCreationErrors
    }
  }

  request UpdateArticle {
    PUT "articles" / (id: Number) with ArticleUpdate
    requiring {
      IsLoggedIn() abort Unauthorized with "Please login before updating articles"
      IsAdmin() abort Forbidden with "You do not have enough rights to update articles"
      IsOwnerOfArticle(id) abort Forbidden with "You are not authorized to update the article of someone else"
    }
    returning {
      200
      400 with ArticleUpdateErrors
      404 with "Article not found"
    }
  }

  /**
   * The user can delete the article if it exists.
   * In the case the article is locked, the user cannot delete it and have a specific response.
   */
  request DeleteArticle {
    DELETE "articles" / (id: Number)
    requiring {
      IsLoggedIn() abort Unauthorized
      IsAdmin() abort Forbidden
      IsOwnerOfArticle(id) abort Forbidden
      ArticleNotLocked(id) abort BadRequest with ErrorMessage
    }
    returning {
      Ok
      NotFound with "Article not found"
    }
  }
}}}